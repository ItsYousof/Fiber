"""File creation and management functionality for Fiber."""
import os
import subprocess
from datetime import datetime
from typing import Optional
from dotenv import load_dotenv
from rich.console import Console

console = Console()

# Load environment variables
load_dotenv()

def get_default_path() -> str:
    """Get the default path for creating files from environment variables."""
    default_path = os.getenv("DEFAULT_PATH")
    if not default_path:
        # If no default path is set, use Documents folder
        default_path = os.path.join(os.path.expanduser("~"), "Documents", "Fiber_Notes")
    
    # Create the directory if it doesn't exist
    os.makedirs(default_path, exist_ok=True)
    return default_path

def create_document(topic: str, content: str) -> Optional[str]:
    """Create a document with the given topic and content."""
    try:
        # Clean the topic name for use in filename
        clean_topic = "".join(c if c.isalnum() or c in " -_" else "_" for c in topic)
        date_str = datetime.now().strftime("%Y%m%d")
        filename = f"{date_str}_{clean_topic}.txt"
        
        # Get the full path
        full_path = os.path.join(get_default_path(), filename)
        
        # Write the content
        with open(full_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return full_path
    except Exception as e:
        console.print(f"\n[red]Error creating document:[/red] {str(e)}\n")
        return None

def open_document(file_path: str) -> bool:
    """Open the document using the default system application."""
    try:
        if os.name == 'nt':  # Windows
            os.startfile(file_path)
        else:  # macOS and Linux
            subprocess.run(['xdg-open' if os.name == 'posix' else 'open', file_path])
        return True
    except Exception as e:
        console.print(f"\n[red]Error opening document:[/red] {str(e)}\n")
        return False

def format_content(topic: str, content: str) -> str:
    """Format the content with proper structure."""
    return f"""{topic.title()}
{'=' * len(topic)}

Created: {datetime.now().strftime('%B %d, %Y %I:%M %p')}

{content}

Generated by Fiber AI"""
